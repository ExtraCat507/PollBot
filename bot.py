# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import logging

from telegram.constants import MessageEntityType
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler

from Models import Form, Poll
from config import BOT_TOKEN
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, \
    InlineKeyboardButton, PollOption,MessageEntity

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

MULTIPLE_CHOICE = 3
OPEN_ANSWER = 4


async def echo(update, context):
    print(repr(update.message))


async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = ReplyKeyboardMarkup([['/create_poll', '/vote'], ['/statistics', '/help']], one_time_keyboard=True,
                                   resize_keyboard=True)
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã –∏ —Å–æ–±–∏—Ä–∞—Ç—å –ø–æ –Ω–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ—Ä–∞–±–æ—Ç–∞–µ–º?) ",
        reply_markup=keyboard
    )


async def help_command(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –ø–æ–º–æ–≥–∞—Ç—å... –Ø —Ç–æ–ª—å–∫–æ –≤–∞—à–µ —ç—Ö–æ.")


async def okd(update, context):
    keyboard = ReplyKeyboardMarkup([[InlineKeyboardButton("First Option!", ), InlineKeyboardButton("Second optionüèÜ")]])
    await update.message.reply_text(
        "Ok",
        reply_markup=keyboard
    )


async def close_keyboard(update, context):
    await update.message.reply_text(
        "–ó–∞—Ä–∫—ã–≤–∞—é –∫–ª–∞–≤—É",
        reply_markup=ReplyKeyboardRemove()
    )


async def create_poll(update, context):
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ç–µ–º—É: ",
        reply_markup=ReplyKeyboardRemove()
    )

    form = Form()
    context.user_data['poll'] = form
    return 1


async def title_response(update, context):
    poll = context.user_data['poll']
    poll.set_title(update.message.text)
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ,—Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤!\n–î–æ–±–∞–≤–ª—è–π –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –¥—É–º–∞—é, –æ—á–µ–≤–∏–¥–Ω–æ —á—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å üòÑ",
        reply_markup=ReplyKeyboardMarkup(
            [['–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞'], ['–í–æ–ø—Ä–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º'], ['–ù–∞ —ç—Ç–æ–º –≤—Å—ë']], one_time_keyboard=True,
            resize_keyboard=True)
    )
    return 2


async def question_response(update, context):
    reply = update.message.text
    if reply == '–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞':
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–≥-–æ–ø—Ä–æ—Å: ",
            reply_markup=ReplyKeyboardRemove()
        )
        return MULTIPLE_CHOICE

    elif reply == '–í–æ–ø—Ä–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞..",
            reply_markup=ReplyKeyboardRemove()
        )
        return OPEN_ANSWER

    elif reply == '–ù–∞ —ç—Ç–æ–º –≤—Å—ë':
        poll = context.user_data['poll']
        key = poll.save()
        if key == "ERROR":
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(")
        else:
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞!\n"
                f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–æ—Å–∞: {key} \n"
                f"–î–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–≤–æ–π –æ–ø—Ä–æ—Å",
                entities=(MessageEntity(type=MessageEntityType.CODE,offset=53,length=11),)
            )
        context.user_data['poll'] = None
        return ConversationHandler.END

    else:
        await update.message.reply_text(
            "–¢–∞–∫–± –Ω–µ –ø–æ —Ç–µ–∫—Å—Ç—É!\n–î–æ–±–∞–≤–ª—è–π –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –¥—É–º–∞—é, –æ—á–µ–≤–∏–¥–Ω–æ —á—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å üòÑ",
            reply_markup=ReplyKeyboardMarkup(
                [['–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞'], ['–í–æ–ø—Ä–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º'], ['–ù–∞ —ç—Ç–æ–º –≤—Å—ë']],
                one_time_keyboard=True, resize_keyboard=True)
        )
        return 2


async def multiple_choice_init(update, context):
    poll = update.message.poll
    # print(poll.question, repr(poll.options), poll.type, poll.allows_multiple_answers)
    questions = list(map(lambda x: x.text, poll.options))
    # message = await context.bot.send_poll(
    #     chat_id=update.effective_chat.id,
    #     question=poll.question,
    #     type=poll.type,
    #     allows_multiple_answers=poll.allows_multiple_answers,
    #     is_anonymous= False,
    #     options=questions)

    poll_dict = {
        'chat_id': update.effective_chat.id,
        'question': poll.question,
        'type': poll.type,
        'allows_multiple_answers': poll.allows_multiple_answers,
        'is_anonymous': poll.is_anonymous,
        'options': questions
    }

    form = context.user_data['poll']

    form.append((MULTIPLE_CHOICE, poll_dict))

    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=ReplyKeyboardMarkup(
            [['–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞'], ['–í–æ–ø—Ä–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º'], ['–ù–∞ —ç—Ç–æ–º –≤—Å—ë']],
            one_time_keyboard=True, resize_keyboard=True)
    )

    return 2


async def open_answer_init(update, context):
    text = update.message.text
    form = context.user_data['poll']
    form.append((OPEN_ANSWER, text))

    await update.message.reply_text(
        "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=ReplyKeyboardMarkup(
            [['–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞'], ['–í–æ–ø—Ä–æ—Å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º'], ['–ù–∞ —ç—Ç–æ–º –≤—Å—ë']],
            one_time_keyboard=True, resize_keyboard=True)
    )

    return 2


async def vote(update, context):
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–æ—Å–∞"
    )
    return 1

async def open_survey(update,context):
    title = update.message.text
    poll = Form()
    reply = poll.load(title)
    if reply == "Load Error":
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑:")
        return 1
    context.user_data['poll'] = poll
    print(poll)


async def get_statistics(update, context):
    pass


# async def poll_handler(update, context):
#     poll = update.message.poll
#     #print(poll.question, repr(poll.options), poll.type, poll.allows_multiple_answers)
#     questions = list(map(lambda x : x.text,poll.options))
#     # message = await context.bot.send_poll(
#     #     chat_id=update.effective_chat.id,
#     #     question=poll.question,
#     #     type=poll.type,
#     #     allows_multiple_answers=poll.allows_multiple_answers,
#     #     is_anonymous= False,
#     #     options=questions)
#
#     poll_dict = {
#         'chat_id':update.effective_chat.id,
#         'question':poll.question,
#         'type':poll.type,
#         'allows_multiple_answers':poll.allows_multiple_answers,
#         'is_anonymous': False,
#         'options':questions
#     }
#
#     form = context.user_data['poll']
#
#     form.append((MULTIPLE_CHOICE,poll_dict))
#
#     return 2


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application.

    application = Application.builder().token(BOT_TOKEN).build()

    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ filters.TEXT
    # –∏–∑ –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤—ã—à–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ echo()
    # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    # —ç—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    # —Å —Ç–∏–ø–æ–º "—Ç–µ–∫—Å—Ç", —Ç. –µ. —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, echo)

    # –¥–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("okd", okd))
    application.add_handler(CommandHandler("close_keyboard", close_keyboard))
    #application.add_handler(CommandHandler("vote", vote))
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    form_creation = ConversationHandler(
        entry_points=[CommandHandler('create_poll', create_poll)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, title_response)],
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_response)],
            MULTIPLE_CHOICE: [MessageHandler(filters.POLL & ~filters.COMMAND, multiple_choice_init)],
            OPEN_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, open_answer_init)]
        },

        fallbacks=[CommandHandler("close_keyboard", close_keyboard)]

    )
    application.add_handler(form_creation)


    form_voting = ConversationHandler(
        entry_points=[CommandHandler('vote', vote)],

        states={
            1 : [MessageHandler(filters.TEXT & ~filters.COMMAND,open_survey)]
        },

        fallbacks=[CommandHandler("close_keyboard", close_keyboard)]
    )
    application.add_handler(form_voting)

    application.add_handler(text_handler)

    #application.add_handler(MessageHandler(filters.POLL, poll_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
